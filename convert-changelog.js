#!/usr/bin/env node

/**
 * Converts the changelog generated by jquery-release
 * to HTML and groups commits by component
 * Usage: cat /path/to/changelog.txt | ./convert-changelog.js > new-changelog.txt
 */

var stdin = process.openStdin();
var data = "";

stdin.on('data', function(chunk) {
	data += chunk;
});

stdin.on('end', function() {
	console.log(convert(data));
});

function removeIssueList(changes) {
	changes = changes.replace(/\-\-\- Issue List \-\-\-[\w\W]*/, '');
	return changes;
}

function removeTicketRef(changes) {
	changes = changes.replace(/__TICKETREF__, /g, '');
	return changes;
}

/**
 * Converts Markdown links to HTML links
 */
function linkify(changes) {
	changes = changes.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>');
	return changes;
}

/**
 * Remove all revert commits and the commit it is reverting
 */
function removeReverts(changes) {
	var commits = [],
		double = {};
	changes = changes.replace(/\*\s*Revert "(.*)" \([^\n]*\n/g, function(all, message) {
		var index;

		// Handle double reverts
		if (/^Revert/.test(message)) {
			double[message] = message.replace(/^Revert "(.*)"/, "$1");
			if ((index = commits.indexOf(double[message])) > -1) {
				commits.splice(index, 1);
			}

		// Don't add if double-reverted
		} else if (commits.indexOf(message) === -1 && !double[message]) {
			commits.push(message);
		}
		return "";
	});

	var removed, message, rcommit;
	while (commits.length) {
		removed = false;
		message = commits.shift();
		rcommit = new RegExp("\\*\\s*" + message.replace(/[()\$#]/g, "\\$&") + "[^\\n]*\\n");
		changes = changes.replace(rcommit, function(all) {
			removed = true;
			return "";
		});
		if (!removed) {
			console.log(rcommit);
			throw new Error("Revert not removed: " + message);
		}
	}
	return changes;
}

/**
 * Converts the commit list to list elements
 */
function listify(changes) {
	changes = changes.replace(/\*\s*([^\n]+)/g, '<li>$1</li>');
	return changes;
}

function componentize(changes) {
	var components = {};
	changes = "<ul>\n" + changes.replace(/<li>(\w+):\s*([^\n]+)/g, function(all, component, message) {
		if (!components[component]) {
			message = '</ul>\n\n<h3>' + component + '</h3>\n<ul>\n<li>' + message;
			components[component] = true;
		} else {
			message = '<li>' + message;
		}
		return message;
	});

	changes += "</ul>";
	return changes;
}

/**
 * Takes the entire changelog and converts it
 * @param {string} changes
 */
function convert(changes) {
	changes = removeIssueList(changes);
	changes = removeTicketRef(changes);
	changes = linkify(changes);
	changes = removeReverts(changes);
	changes = listify(changes);
	changes = componentize(changes);
	return changes;
}
